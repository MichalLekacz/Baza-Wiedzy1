[{
        "subject": "JavaScript",
        "title": "Delegacja zdarzeń",
        "article": "Delegacja zdarzeń w JavaScript to technika, w której zdarzenia obsługiwane są na jednym elemencie nadrzędnym (rodzicu), zamiast bezpośrednio na elementach potomnych. Głównym celem tej techniki jest efektywne zarządzanie zdarzeniami, zwłaszcza gdy mamy wiele elementów potomnych, na których chcemy obsługiwać te same zdarzenia. Podstawowym powodem stosowania delegacji zdarzeń jest optymalizacja wydajności i redukcja ilości obsługiwanych nasłuchiwaczy zdarzeń, co jest szczególnie ważne w przypadku dużych stron internetowych. Przykładowo, zakładamy, że mamy listę elementów <kbd><strong>&lt;li&gt;</strong></kbd> wewnątrz elementu <kbd><strong>&lt;ul&gt;</strong></kbd>, i chcemy reagować na kliknięcia na każdym z elementów <kbd><strong>&lt;ul&gt;</strong></kbd>. Zamiast dodawać oddzielny nasłuchiwacz dla każdego <kbd><strong>&lt;ul&gt;</strong></kbd>, możemy zastosować delegację zdarzeń na elemencie <kbd><strong>&lt;ul&gt;</strong></kbd>. Przy użyciu eventu propagacji (bąbelkowania), możemy łatwo określić, który element <kbd><strong>&lt;li&gt;</strong></kbd> został kliknięty. <br /><br /> <ins>Przykładowy kod delegacji zdarzeń w czystym JavaScript może wyglądać tak:</ins>",
        "code": "// Pobierz referencję do elementu nadrzędnego (delegata)\nvar ulElement = document.querySelector('ul'); // Dodaj nasłuchiwacz zdarzeń dla kliknięć na elemencie nadrzędnym\n\tulElement.addEventListener('click', function(event) { // Sprawdź, czy kliknięcie nastąpiło na elemencie <li>\nif(event.target.tagName === 'LI') { // Obsłuż zdarzenie dla elementu <li>\nconsole.log('Kliknięto na element: ', event.target.textContent); } });"

    },

    {
        "subject": "HTML",
        "title": "Zajęcia z HTML",
        "article": "Delegacja zdarzeń w JavaScript to technika, w której zdarzenia obsługiwane są na jednym elemencie nadrzędnym (rodzicu), zamiast bezpośrednio na elementach potomnych. Głównym celem tej techniki jest efektywne zarządzanie zdarzeniami, zwłaszcza gdy mamy wiele elementów potomnych, na których chcemy obsługiwać te same zdarzenia. Podstawowym powodem stosowania delegacji zdarzeń jest optymalizacja wydajności i redukcja ilości obsługiwanych nasłuchiwaczy zdarzeń, co jest szczególnie ważne w przypadku dużych stron internetowych. Przykładowo, zakładamy, że mamy listę elementów <kbd><strong>&lt;li&gt;</strong></kbd> wewnątrz elementu <kbd><strong>&lt;ul&gt;</strong></kbd>, i chcemy reagować na kliknięcia na każdym z elementów <kbd><strong>&lt;ul&gt;</strong></kbd>. Zamiast dodawać oddzielny nasłuchiwacz dla każdego <kbd><strong>&lt;ul&gt;</strong></kbd>, możemy zastosować delegację zdarzeń na elemencie <kbd><strong>&lt;ul&gt;</strong></kbd>. Przy użyciu eventu propagacji (bąbelkowania), możemy łatwo określić, który element <kbd><strong>&lt;li&gt;</strong></kbd> został kliknięty. <br /><br /> <ins>Przykładowy kod delegacji zdarzeń w czystym JavaScript może wyglądać tak:</ins>",
        "code": "// Pobierz referencję do elementu nadrzędnego (delegata)\nvar ulElement = document.querySelector('ul'); // Dodaj nasłuchiwacz zdarzeń dla kliknięć na elemencie nadrzędnym\n\tulElement.addEventListener('click', function(event) { // Sprawdź, czy kliknięcie nastąpiło na elemencie <li>\nif(event.target.tagName === 'LI') { // Obsłuż zdarzenie dla elementu <li>\nconsole.log('Kliknięto na element: ', event.target.textContent); } });"
    }
]