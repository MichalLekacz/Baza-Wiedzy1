[{
        "subject": "JavaScript",
        "title": "Delegacja zdarzeń",
        "article": "Delegacja zdarzeń w JavaScript to technika, w której zdarzenia obsługiwane są na jednym elemencie nadrzędnym (rodzicu), zamiast bezpośrednio na elementach potomnych. Głównym celem tej techniki jest efektywne zarządzanie zdarzeniami, zwłaszcza gdy mamy wiele elementów potomnych, na których chcemy obsługiwać te same zdarzenia.<br><br>Podstawowym powodem stosowania delegacji zdarzeń jest optymalizacja wydajności i redukcja ilości obsługiwanych nasłuchiwaczy zdarzeń, co jest szczególnie ważne w przypadku dużych stron internetowych.<br><br>Przykładowo, zakładamy, że mamy listę elementów <kbd><strong>&lt;li&gt;</strong></kbd> wewnątrz elementu <kbd><strong>&lt;ul&gt;</strong></kbd>, i chcemy reagować na kliknięcia na każdym z elementów <kbd><strong>&lt;ul&gt;</strong></kbd>. Zamiast dodawać oddzielny nasłuchiwacz dla każdego <kbd><strong>&lt;ul&gt;</strong></kbd>, możemy zastosować delegację zdarzeń na elemencie <kbd><strong>&lt;ul&gt;</strong></kbd>. Przy użyciu eventu propagacji (bąbelkowania), możemy łatwo określić, który element <kbd><strong>&lt;li&gt;</strong></kbd> został kliknięty. <br><br><br><br> <ins>Przykładowy kod delegacji zdarzeń w czystym JavaScript może wyglądać tak:</ins>",
        "code": "// Pobierz referencję do elementu nadrzędnego (delegata)\nvar ulElement = document.querySelector('ul'); // Dodaj nasłuchiwacz zdarzeń dla kliknięć na elemencie nadrzędnym\n\tulElement.addEventListener('click', function(event) { // Sprawdź, czy kliknięcie nastąpiło na elemencie <li>\nif(event.target.tagName === 'LI') { // Obsłuż zdarzenie dla elementu <li>\nconsole.log('Kliknięto na element: ', event.target.textContent); } });"

    },

    {
        "subject": "JavaScript",
        "title": "Zakresy Zmiennych(scope) i rodzaje deklaracji",
        "article": {
            "article1": "W tym przykładzie, kiedy następuje kliknięcie na elemencie <kbd><strong>&lt;ul&gt;</strong></kbd>, sprawdzamy, czy kliknięty element to <kbd><strong>&lt;li&gt;</strong></kbd>. Jeśli tak, to możemy obsłużyć zdarzenie. Dzięki temu, nawet gdy dodamy lub usuniemy elementy <kbd><strong>&lt;li&gt;</strong></kbd>, nie musimy aktualizować nasłuchiwaczy zdarzeń, ponieważ nasłuchiwanie odbywa się na elemencie nadrzędnym (<kbd><strong>&lt;li&gt;</strong></kbd>).<br><br> Scope (zakres) w programowaniu odnosi się do obszaru, w którym zmienna jest dostępna lub gdzie funkcja jest zdefiniowana. W JavaScript istnieją dwa główne rodzaje zakresów: zakres globalny i zakres lokalny.",
            "article2": "<strong>Zakres globalny:</strong> Zmienne zdefiniowane na poziomie głównego ciała programu lub poza jakąkolwiek funkcją są globalne i mogą być używane w dowolnym miejscu w programie."
        },
        "code": null
    }
]